use serde::{Serialize, Deserialize};

#[derive(Clone, Serialize, Deserialize)]
pub struct TrainingExercise {
    pub description: String,
    pub success_rate: f64,
}

pub fn get_training_exercises() -> Vec<TrainingExercise> {
    vec![
        TrainingExercise {
            description: "–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –ø–æ–¥–Ω—è—Ç—å –≤–µ–¥—Ä–æ –≤–æ–¥—ã —Å–≤–æ–∏–º –ø–∏—Å—é–Ω–æ–º ü™£".to_string(),
            success_rate: 0.6,
        },
        TrainingExercise {
            description: "–¢—ã —Ä–µ—à–∏–ª –ø–æ—Ç—è–≥–∞—Ç—å –≥–∞–Ω—Ç–µ–ª–∏, –ø—Ä–∏–≤—è–∑–∞–≤ –∏—Ö –∫ —Å–≤–æ–µ–º—É –ø–∏—Å—é–Ω—É üèãÔ∏è‚Äç‚ôÇÔ∏è".to_string(),
            success_rate: 0.7,
        },
        TrainingExercise {
            description: "–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –æ—Ç–∫—Ä—ã—Ç—å –±—É—Ç—ã–ª–∫—É –ø–∏–≤–∞ —Å–≤–æ–∏–º –ø–∏—Å—é–Ω–æ–º üç∫".to_string(),
            success_rate: 0.5,
        },
        TrainingExercise {
            description: "–¢—ã —Ä–µ—à–∏–ª –ø–æ—Å–µ—Ç–∏—Ç—å –π–æ–≥—É –¥–ª—è –ø–∏—Å—é–Ω–æ–≤ üßò‚Äç‚ôÇÔ∏è".to_string(),
            success_rate: 0.8,
        },
        TrainingExercise {
            description: "–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –Ω–∞–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–≤–æ–∏–º –ø–∏—Å—é–Ω–æ–º üíª".to_string(),
            success_rate: 0.4,
        },
    ]
}