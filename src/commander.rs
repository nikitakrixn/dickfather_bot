use teloxide::types::ChatId;
use teloxide::Bot;
use teloxide::macros::BotCommands;
use teloxide::prelude::{Message, Requester};
use chrono::{DateTime, Utc};
use rand::Rng;
use reqwest::Client;
use scraper::{Html, Selector};
use crate::config::Config;
use crate::loader::Error;

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã:")]
pub enum Command {
    #[command(description = "–ò–∑–º–µ—Ä—è–µ—Ç —Ç–≤–æ—é –ø–∏–ø–∏—Ä–∫—É")]
    Pisun,
    #[command(description = "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä")]
    Size,
    #[command(description = "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")]
    Top,
    #[command(description = "–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç")]
    Anekdot
}

pub(crate) async fn command_handler(bot: Bot, msg: Message, cmd: Command) -> Result<(), Error> {
    let mut config = Config::new().await;
    match cmd {
        Command::Pisun => pisun_handler(bot, msg, &mut config).await,
        Command::Size => size_handler(bot, msg, &mut config).await,
        Command::Top => top_handler(bot, msg, &mut config).await,
        Command::Anekdot => joke_handler(bot, msg).await,
    }
}

async fn pisun_handler(bot: Bot, msg: Message, config: &mut Config) -> Result<(), Error> {
    let user_id = msg.from.clone().map(|user| user.id.0 as i64).unwrap_or(0);
    let mut user = config.get_or_create_user(user_id).clone();
    
    if can_use_command(user.last_command) {
        let change = match user.pisun {
            0 => generate_random_change(0, 10),
            _ => generate_random_change(-10, 10),
        };
        let message = get_roll_message(change);
        
        user.pisun += change;
        user.last_command = Utc::now();

        if user.pisun < 0 {
            user.pisun = 0;
            bot.send_message(msg.chat.id, "–ú–æ–∏ —Å–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞–Ω–∏—è. –°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å—Ç—Ä–∞—à–Ω–∞—è —Ç—Ä–∞–≥–µ–¥–∏—è, —Ç–≤–æ–π –ø–∏—Å—é–Ω –æ—Ç–ø–∞–ª.").await?;
        } else {
            bot.send_message(msg.chat.id, message).await?;
        }

        config.update_user(user_id, |u| *u = user);
    } else {
        send_cooldown_message(&bot, msg.chat.id).await?;
    }
    
    Ok(())
}

async fn size_handler(bot: Bot, msg: Message, config: &mut Config) -> Result<(), Error> {
    let user_id = msg.from.clone().map(|user| user.id.0 as i64).unwrap_or(0);
    let user = config.get_or_create_user(user_id);
    
    let message = match user.pisun {
        0 => "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Å—é–Ω–∞, –Ω–µ—É–¥–∞—á–Ω–∏–∫!".to_string(),
        _ => format!("–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Ç–≤–æ–µ–≥–æ –ø–∏—Å—é–Ω–∞ –∞–∂ {} —Å–º.", user.pisun),
    };
    bot.send_message(msg.chat.id, message).await?;
    
    Ok(())
}

async fn top_handler(bot: Bot, msg: Message, config: &Config) -> Result<(), Error> {
    let users = config.get_all_users();
    let mut users: Vec<_> = users.values().collect();
    users.sort_by_key(|u| std::cmp::Reverse(u.pisun));
    
    let top = users.iter()
        .take(10)
        .enumerate()
        .map(|(i, u)| format!("{}. {} —Å–º.", i + 1, u.pisun))
        .collect::<Vec<_>>()
        .join("\n");
    
    let message = format!("–¢–æ–ø 10 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –ø–∏—Å—é–Ω–æ–≤:\n{}", top);
    bot.send_message(msg.chat.id, message).await?;
    
    Ok(())
}

async fn joke_handler(bot: Bot, msg: Message) -> Result<(), Error> {
    match get_random_joke().await {
        Ok(joke) => {
            bot.send_message(msg.chat.id, joke).await?;
        }
        Err(e) => {
            eprintln!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {}", e);
            bot.send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç").await?;
        }
    }
    Ok(())
}


fn can_use_command(last_command: DateTime<Utc>) -> bool {
    let now = chrono::Local::now();
    let last_command_date = last_command.date_naive();
    let current_date = now.date_naive();

    current_date > last_command_date 
}

fn generate_random_change(a: i32, b: i32) -> i32 {
    rand::thread_rng().gen_range(a..=b)
}

async fn send_cooldown_message(bot: &Bot, chat_id: ChatId) -> Result<Message, Error> {
    bot.send_message(
        chat_id,
        "–¢—ã —É–∂–µ –∏–∑–º–µ—Ä—è–ª —Å–≤–æ–π –æ–≥—Ä—ã–∑–æ–∫ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞ üòä"
    ).await.map_err(|e| e.into())
}

fn get_roll_message(change: i32) -> String {
    let abs_change = change.abs();
    
    match change {
        -10..=-7 => format!(
            "–ê—Ö–∞—Ö–∞—Ö–∞—Ö, –Ω–µ—É–¥–∞—á–Ω–∏–∫. –¢–≤–æ–π –æ–≥—Ä—ã–∑–æ–∫ —Å—Ç–∞–ª –º–µ–Ω—å—à–µ –Ω–∞ —Ü–µ–ª—ã—Ö {} —Å–º.", 
            abs_change
        ),
        -6..=-3 => format!(
            "–¢–≤–æ–π, –∏ –Ω–µ –±–µ–∑ —Ç–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏–π –ø–µ–Ω–∏—Å, —Å—Ç–∞–ª –º–µ–Ω—å—à–µ –∞–∂ –Ω–∞ {} —Å–º.", 
            abs_change
        ),
        -2..=-1 => format!(
            "–ú–æ–∏ —Å–ø—É—Ç–Ω–∏–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ø–æ–ª–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∞ –Ω–∞ {} —Å–º.", 
            abs_change
        ),
        0 => "–ù—É—É—É—É, —á—Ç–æ —Ç—É—Ç –º–æ–∂–Ω–æ –µ—â—ë —Å–∫–∞–∑–∞—Ç—å... –¢–≤–æ—è –ø–∏–ø–∏—Ä–∫–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã—Ä–æ—Å–ª–∞".to_string(),
        1..=3 => format!(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ–π —á–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ä–æ—Å –Ω–∞ —Ü–µ–ª—ã—Ö {} —Å–º.", 
            abs_change
        ),
        4..=7 => format!(
            "–í—Å–µ —Ç—è–Ω–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ –≤ —à–æ–∫–µ! –¢–≤–æ–π –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π –ø–æ–ª–æ–≤–æ–π –æ—Ä–≥–∞–Ω —Å—Ç–∞–ª –±–æ–ª—å—à–µ –Ω–∞ {} —Å–º.", 
            abs_change
        ),
        8..=10 => format!(
            "*–ê—Ö —Ç—ã —á–∏—Ç–µ—Ä!* –ö–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º —Ç—ã —Å–º–æ–≥ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –ø–∏—Å—é–Ω –Ω–∞ {} —Å–º.", 
            abs_change
        ),
        _ => "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...".to_string(),
    }
}

async fn get_random_joke() -> Result<String, reqwest::Error> {
    let client = Client::new();
    let url = "https://baneks.ru/random";
    let response = client.get(url).send().await?;
    let body = response.text().await?;

    let document = Html::parse_document(&body);
    let selector = Selector::parse("article p").unwrap();

    if let Some(element) = document.select(&selector).next() {
        let joke = element.text().collect::<Vec<_>>().join("\n");
        Ok(joke)
    } else {
        Ok("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç".to_string())
    }
}