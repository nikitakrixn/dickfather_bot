use rand::seq::SliceRandom;
use teloxide::types::ChatId;
use teloxide::Bot;
use teloxide::macros::BotCommands;
use teloxide::prelude::{Message, Requester};
use chrono::{DateTime, Local, Utc};
use rand::Rng;
use reqwest::Client;
use scraper::{Html, Selector};
use crate::config::Config;
use crate::loader::Error;
use crate::models::{TrainingExercise, get_training_exercises};

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã:")]
pub enum Command {
    #[command(description = "–ò–∑–º–µ—Ä—è–µ—Ç —Ç–≤–æ—é –ø–∏–ø–∏—Ä–∫—É")]
    Pisun,
    #[command(description = "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä")]
    Size,
    #[command(description = "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")]
    Top,
    #[command(description = "–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç")]
    Anekdot,
    #[command(description = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–≤–æ–µ–≥–æ –ø–∏—Å—é–Ω–∞")]
    Train,
    #[command(description = "–ü–æ–≥–æ–¥–∞")]
    Weather,
    #[command(description = "–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º")]
    Meme
}

pub(crate) async fn command_handler(bot: Bot, msg: Message, cmd: Command) -> Result<(), Error> {
    let mut config = Config::new().await;
    match cmd {
        Command::Pisun => pisun_handler(bot, msg, &mut config).await,
        Command::Size => size_handler(bot, msg, &mut config).await,
        Command::Top => top_handler(bot, msg, &mut config).await,
        Command::Anekdot => joke_handler(bot, msg).await,
        Command::Train => train_handler(bot, msg, &mut config).await,
        Command::Weather => weather_handler(bot, msg, &mut config).await,
        Command::Meme => meme_handler(bot, msg).await
    }
}

async fn pisun_handler(bot: Bot, msg: Message, config: &mut Config) -> Result<(), Error> {
    let user_id = msg.from.clone().map(|user| user.id.0 as i64).unwrap_or(0);
    let mut user = config.get_or_create_user(user_id).clone();
    
    if can_use_command(user.last_command) {
        let change = match user.pisun {
            0 => generate_random_change(0, 10),
            _ => generate_random_change(-10, 10),
        };
        let message = get_roll_message(change);
        
        user.pisun += change;
        user.last_command = Utc::now();

        if user.pisun < 0 {
            user.pisun = 0;
            bot.send_message(msg.chat.id, "–ú–æ–∏ —Å–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞–Ω–∏—è. –°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å—Ç—Ä–∞—à–Ω–∞—è —Ç—Ä–∞–≥–µ–¥–∏—è, —Ç–≤–æ–π –ø–∏—Å—é–Ω –æ—Ç–ø–∞–ª.").await?;
        } else {
            bot.send_message(msg.chat.id, message).await?;
        }

        config.update_user(user_id, |u| *u = user);
    } else {
        send_cooldown_message(&bot, msg.chat.id).await?;
    }
    
    Ok(())
}

async fn size_handler(bot: Bot, msg: Message, config: &mut Config) -> Result<(), Error> {
    let user_id = msg.from.clone().map(|user| user.id.0 as i64).unwrap_or(0);
    let user = config.get_or_create_user(user_id);
    
    let message = match user.pisun {
        0 => "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Å—é–Ω–∞, –Ω–µ—É–¥–∞—á–Ω–∏–∫!".to_string(),
        _ => format!("–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Ç–≤–æ–µ–≥–æ –ø–∏—Å—é–Ω–∞ –∞–∂ {} —Å–º.", user.pisun),
    };
    bot.send_message(msg.chat.id, message).await?;
    
    Ok(())
}

async fn top_handler(bot: Bot, msg: Message, config: &Config) -> Result<(), Error> {
    let users = config.get_all_users();
    let mut users: Vec<_> = users.values().collect();
    users.sort_by_key(|u| std::cmp::Reverse(u.pisun));
    
    let top = users.iter()
        .take(10)
        .enumerate()
        .map(|(i, u)| format!("{}. {} —Å–º.", i + 1, u.pisun))
        .collect::<Vec<_>>()
        .join("\n");
    
    let message = format!("–¢–æ–ø 10 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –ø–∏—Å—é–Ω–æ–≤:\n{}", top);
    bot.send_message(msg.chat.id, message).await?;
    
    Ok(())
}

async fn joke_handler(bot: Bot, msg: Message) -> Result<(), Error> {
    match get_random_joke().await {
        Ok(joke) => {
            bot.send_message(msg.chat.id, joke).await?;
        }
        Err(e) => {
            eprintln!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {}", e);
            bot.send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç").await?;
        }
    }
    Ok(())
}

async fn train_handler(bot: Bot, msg: Message, config: &mut Config) -> Result<(), Error> {
    let user_id = msg.from.clone().map(|user| user.id.0 as i64).unwrap_or(0);
    let mut user = config.get_or_create_user(user_id).clone();
    
    let now = Utc::now();
    let can_train = now.date_naive() > user.last_train.date_naive();

    if can_train {
        let (exercise, result) = generate_training_exercise();
        let (change, message) = process_training_result(result, user.pisun);

        user.pisun = (user.pisun + change).max(0);
        user.last_train = now;

        let response = format!(
            "{}\n\n{}",
            exercise.description,
            message
        );

        bot.send_message(msg.chat.id, response).await?;
        config.update_user(user_id, |u| *u = user);
    } else {
        bot.send_message(msg.chat.id, "–¢—ã —É–∂–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ üí™üçÜ").await?;
    }
    
    Ok(())
}
async fn weather_handler(bot: Bot, msg: Message, config: &mut Config) -> Result<(), Error> {
    let url = "https://api.open-meteo.com/v1/forecast?latitude=55&longitude=73.70&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,rain,showers,snowfall,weathercode,windspeed_10m&hourly=temperature_2m,precipitation_probability,weathercode&daily=temperature_2m_max,temperature_2m_min,sunrise,sunset&wind_speed_unit=ms&timeformat=unixtime&timezone=auto&forecast_days=3";

    let response = reqwest::get(url).await.unwrap();

    let weather_info: serde_json::Value = match response.status().is_success() {
        true => {
            let text = response.text().await.unwrap();

            let data = serde_json::from_str(&text).unwrap();
            data
        }
        _ => {
            panic!("Oh no! A wild error appears: {:?}", response.status());
        }
    };

    let current = &weather_info["current"];
    let daily = &weather_info["daily"];
    let hourly = &weather_info["hourly"];

    let current_temp = current["temperature_2m"].as_f64().unwrap();
    let apparent_temp = current["apparent_temperature"].as_f64().unwrap();
    let humidity = current["relative_humidity_2m"].as_f64().unwrap();
    let is_day = current["is_day"].as_i64().unwrap();
    let wind_speed = current["windspeed_10m"].as_f64().unwrap();
    let weather_code = current["weathercode"].as_i64().unwrap();

    let weather_description = get_weather_description(weather_code);
    let weather_emoji = get_weather_emoji(is_day, weather_code);

    let now: DateTime<Local> = Local::now();

    let max_temp = daily["temperature_2m_max"][0].as_f64().unwrap();
    let min_temp = daily["temperature_2m_min"][0].as_f64().unwrap();
    let sunrise = DateTime::from_timestamp(daily["sunrise"][0].as_i64().unwrap(), 0).unwrap().with_timezone(&Local);
    let sunset = DateTime::from_timestamp(daily["sunset"][0].as_i64().unwrap(), 0).unwrap().with_timezone(&Local);

    let clothing_recommendation = get_clothing_recommendation(current_temp);

    let precipitation_prob = hourly["precipitation_probability"]
        .as_array()
        .unwrap()
        .iter()
        .take(24)
        .map(|v| v.as_i64().unwrap())
        .max()
        .unwrap();

    let mut weather_message = format!(
        "{} –ü–æ–≥–æ–¥–∞ –≤ –û–º—Å–∫–µ –Ω–∞ {}\n\n\
        –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {:.1}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {:.1}¬∞C)\n\
        {}\n\
        –í–ª–∞–∂–Ω–æ—Å—Ç—å: {}%\n\
        –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {:.1} –º/—Å\n\
        –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {}%\n\n\
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–≥–æ–¥–Ω—è: {:.1}¬∞C\n\
        –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–≥–æ–¥–Ω—è: {:.1}¬∞C\n\
        –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {}\n\
        –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {}\n\n\
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –æ–¥–µ–∂–¥–µ: {}\n\n\
        –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:\n{}",
        weather_emoji,
        now.format("%d.%m.%Y %H:%M").to_string(),
        current_temp,
        apparent_temp,
        weather_description,
        humidity,
        wind_speed,
        precipitation_prob,
        max_temp,
        min_temp,
        sunrise.format("%H:%M").to_string(),
        sunset.format("%H:%M").to_string(),
        clothing_recommendation,
        get_forecast(daily, hourly)
    );

    if rand::thread_rng().gen_bool(0.1) {
        let user_id = msg.from.clone().map(|user| user.id.0 as i64).unwrap_or(0);
        let mut user = config.get_or_create_user(user_id).clone();
        
        let pisun_change = calculate_pisun_change(current_temp);
        user.pisun = (user.pisun + pisun_change).max(0);
        
        let pisun_message = if pisun_change > 0 {
            format!("\n\n–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ! –ò–∑-–∑–∞ –ø–æ–≥–æ–¥—ã —Ç–≤–æ–π –ø–∏—Å—é–Ω –≤—ã—Ä–æ—Å –Ω–∞ {} —Å–º!", pisun_change)
        } else if pisun_change < 0 {
            format!("\n\n–û–π-–æ–π! –ò–∑-–∑–∞ –ø–æ–≥–æ–¥—ã —Ç–≤–æ–π –ø–∏—Å—é–Ω —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ {} —Å–º!", pisun_change.abs())
        } else {
            "\n\n–ü–æ–≥–æ–¥–∞ –Ω–µ –ø–æ–≤–ª–∏—è–ª–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ç–≤–æ–µ–≥–æ –ø–∏—Å—é–Ω–∞.".to_string()
        };

        weather_message.push_str(&pisun_message);
        weather_message.push_str(&format!("\n–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Ç–≤–æ–µ–≥–æ –ø–∏—Å—é–Ω–∞: {} —Å–º.", user.pisun));

        config.update_user(user_id, |u| *u = user);
    }

    bot.send_message(msg.chat.id, weather_message).await?;

    Ok(())
}

fn can_use_command(last_command: DateTime<Utc>) -> bool {
    let now = chrono::Local::now();
    let last_command_date = last_command.date_naive();
    let current_date = now.date_naive();

    current_date > last_command_date 
}

fn generate_random_change(a: i32, b: i32) -> i32 {
    rand::thread_rng().gen_range(a..=b)
}

async fn send_cooldown_message(bot: &Bot, chat_id: ChatId) -> Result<Message, Error> {
    bot.send_message(
        chat_id,
        "–¢—ã —É–∂–µ –∏–∑–º–µ—Ä—è–ª —Å–≤–æ–π –æ–≥—Ä—ã–∑–æ–∫ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞ üòä"
    ).await.map_err(|e| e.into())
}

fn get_roll_message(change: i32) -> String {
    let abs_change = change.abs();
    
    match change {
        -10..=-7 => format!(
            "–ê—Ö–∞—Ö–∞—Ö–∞—Ö, –Ω–µ—É–¥–∞—á–Ω–∏–∫. –¢–≤–æ–π –æ–≥—Ä—ã–∑–æ–∫ —Å—Ç–∞–ª –º–µ–Ω—å—à–µ –Ω–∞ —Ü–µ–ª—ã—Ö {} —Å–º! üçÜüìâ", 
            abs_change
        ),
        -6..=-3 => format!(
            "–¢–≤–æ–π, –∏ –Ω–µ –±–µ–∑ —Ç–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏–π –ø–µ–Ω–∏—Å, —Å—Ç–∞–ª –º–µ–Ω—å—à–µ –∞–∂ –Ω–∞ {} —Å–º. üòîüçÜü§è", 
            abs_change
        ),
        -2..=-1 => format!(
            "–ú–æ–∏ —Å–ø—É—Ç–Ω–∏–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ø–æ–ª–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∞ –Ω–∞ {} —Å–º. üòïüçÜ", 
            abs_change
        ),
        0 => "–ù—É—É—É—É, —á—Ç–æ —Ç—É—Ç –º–æ–∂–Ω–æ –µ—â—ë —Å–∫–∞–∑–∞—Ç—å... –¢–≤–æ—è –ø–∏–ø–∏—Ä–∫–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã—Ä–æ—Å–ª–∞ ü§îüçÜ".to_string(),
        1..=3 => format!(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ–π —á–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ä–æ—Å –Ω–∞ —Ü–µ–ª—ã—Ö {} —Å–º. üí™üçÜ", 
            abs_change
        ),
        4..=7 => format!(
            "–í—Å–µ —Ç—è–Ω–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ –≤ —à–æ–∫–µ! –¢–≤–æ–π –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π –ø–æ–ª–æ–≤–æ–π –æ—Ä–≥–∞–Ω —Å—Ç–∞–ª –±–æ–ª—å—à–µ –Ω–∞ {} —Å–º. üöÄüçÜ", 
            abs_change
        ),
        8..=9 => format!(
            "*–ê—Ö —Ç—ã —á–∏—Ç–µ—Ä!* –ö–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º —Ç—ã —Å–º–æ–≥ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –ø–∏—Å—é–Ω –Ω–∞ {} —Å–º. üëëüçÜüèÜ", 
            abs_change
        ),
        10 => format!(
            "üéâüéâüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! +{} —Å–º! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–∏–≥–∞–Ω—Ç! üí™üçÜüëë", 
            abs_change
        ),
        _ => "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...".to_string(),
    }
}

async fn meme_handler(bot: Bot, msg: Message) -> Result<(), Error> {
    match get_random_meme().await {
        Ok(meme_url) => {
            let url = reqwest::Url::parse(&meme_url).expect("–ù–µ–≤–µ—Ä–Ω—ã–π URL");
            bot.send_photo(msg.chat.id, teloxide::types::InputFile::url(url)).await?;
        }
        Err(e) => {
            eprintln!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {}", e);
            bot.send_message(msg.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º").await?;
        }
    }
    Ok(())
}

async fn get_random_joke() -> Result<String, reqwest::Error> {
    let client = Client::new();
    let url = "https://baneks.ru/random";
    let response = client.get(url).send().await?;
    let body = response.text().await?;

    let document = Html::parse_document(&body);
    let selector = Selector::parse("article p").unwrap();

    if let Some(element) = document.select(&selector).next() {
        let joke = element.text().collect::<Vec<_>>().join("\n");
        Ok(joke)
    } else {
        Ok("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç".to_string())
    }
}

fn get_weather_emoji(is_day: i64, weather_code: i64) -> String {
    match weather_code {
        0 => if is_day == 1 { "‚òÄÔ∏è" } else { "üåô" },
        1..=3 => if is_day == 1 { "üå§Ô∏è" } else { "‚òÅÔ∏è" },
        45 | 48 => "üå´Ô∏è",
        51..=55 | 61..=65 | 80..=82 => "üåßÔ∏è",
        56..=57 | 66..=67 => "üå®Ô∏è",
        71..=75 | 85..=86 => "‚ùÑÔ∏è",
        77 => "üå®Ô∏è",
        95..=99 => "‚õàÔ∏è",
        _ => "‚ùì",
    }.to_string()
}

fn get_weather_description(code: i64) -> String {
    match code {
        0 => "–Ø—Å–Ω–æ",
        1..=3 => "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        45 | 48 => "–¢—É–º–∞–Ω",
        51..=55 => "–ú–æ—Ä–æ—Å—å",
        56..=57 => "–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
        61..=65 => "–î–æ–∂–¥—å",
        66..=67 => "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
        71..=75 => "–°–Ω–µ–≥",
        77 => "–°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞",
        80..=82 => "–õ–∏–≤–Ω–µ–≤—ã–µ –¥–æ–∂–¥–∏",
        85..=86 => "–°–Ω–µ–∂–Ω—ã–π –ª–∏–≤–µ–Ω—å",
        95 => "–ì—Ä–æ–∑–∞",
        96..=99 => "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
        _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
    }.to_string()
}

fn get_forecast(daily: &serde_json::Value, hourly: &serde_json::Value) -> String {
    let mut forecast = String::new();
    for i in 1..3 {
        let date = DateTime::from_timestamp(daily["time"][i].as_i64().unwrap(), 0).unwrap().with_timezone(&Local);
        let max_temp = daily["temperature_2m_max"][i].as_f64().unwrap();
        let min_temp = daily["temperature_2m_min"][i].as_f64().unwrap();
        let weather_code = hourly["weathercode"][i * 24].as_i64().unwrap();
        let weather_emoji = get_weather_emoji( 1, weather_code);
        
        forecast.push_str(&format!(
            "{} {}: –æ—Ç {:.1}¬∞C –¥–æ {:.1}¬∞C, {}\n",
            date.format("%d.%m").to_string(),
            weather_emoji,
            min_temp,
            max_temp,
            get_weather_description(weather_code)
        ));
    }
    forecast
}

fn calculate_pisun_change(temperature: f64) -> i32 {
    let mut rng = rand::thread_rng();
    if temperature > 30.0 {
        rng.gen_range(-2..=0)
    } else if temperature > 20.0 {
        rng.gen_range(0..=2)
    } else if temperature > 10.0 {
        rng.gen_range(1..=3)
    } else if temperature > 0.0 {
        rng.gen_range(0..=2)
    } else if temperature > -10.0 {
        rng.gen_range(-1..=1)
    } else {
        rng.gen_range(-2..=0)
    }
}

fn get_clothing_recommendation(temperature: f64) -> String {
    if temperature > 30.0 {
        "–ù–∞–¥–µ–≤–∞–π —Å–∞–º—É—é –ª–µ–≥–∫—É—é –æ–¥–µ–∂–¥—É –∏ –Ω–µ –∑–∞–±—É–¥—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º!"
    } else if temperature > 20.0 {
        "–ú–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —à–æ—Ä—Ç—ã –∏ —Ñ—É—Ç–±–æ–ª–∫—É. –ù–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å –ª–µ–≥–∫—É—é –∫–æ—Ñ—Ç—É –Ω–∞ –≤–µ—á–µ—Ä."
    } else if temperature > 10.0 {
        "–í—Ä–µ–º—è –¥–ª—è –¥–∂–∏–Ω—Å–æ–≤ –∏ –∫–æ—Ñ—Ç—ã. –õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç."
    } else if temperature > 0.0 {
        "–ù–∞–¥–µ–≤–∞–π –∫—É—Ä—Ç–∫—É –ø–æ—Ç–µ–ø–ª–µ–µ, —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏."
    } else if temperature > -10.0 {
        "–ü–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∑–∏–º–Ω—é—é –∫—É—Ä—Ç–∫—É, —Ç–µ–ø–ª—É—é —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏."
    } else {
        "–û–¥–µ–≤–∞–π—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–µ–ø–ª–µ–µ! –ó–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞, —à–∞—Ä—Ñ, —Ç–µ–ø–ª–∞—è —à–∞–ø–∫–∞ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã."
    }.to_string()
}

fn generate_training_exercise() -> (TrainingExercise, bool) {
    let exercises = get_training_exercises();
    let exercise = exercises.choose(&mut rand::thread_rng()).unwrap().clone();
    let success = rand::thread_rng().gen_bool(exercise.success_rate);

    (exercise, success)
}

fn process_training_result(success: bool, current_size: i32) -> (i32, String) {
    let mut rng = rand::thread_rng();

    if success {
        let change = rng.gen_range(1..=3);
        (change, format!("–£—Å–ø–µ—Ö! –¢–≤–æ–π –ø–∏—Å—é–Ω –≤—ã—Ä–æ—Å –Ω–∞ {} —Å–º. üéâ", change))
    } else {
        let change = if current_size > 5 {
            -rng.gen_range(1..=2)
        } else {
            0
        };
        (change, format!("–ù–µ—É–¥–∞—á–∞! {} üòî", if change < 0 { format!("–¢–≤–æ–π –ø–∏—Å—é–Ω —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ {} —Å–º.", change.abs()) } else { "–ù–æ —Ç–≤–æ–π –ø–∏—Å—é–Ω –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª.".to_string() }))
    }
}

async fn get_random_meme() -> Result<String, reqwest::Error> {
    let client = reqwest::Client::new();
    let url = "https://pda.anekdot.ru/random/mem/";
    let response = client.get(url).send().await?;
    
    if response.status().is_success() {
        let body = response.text().await?;

        let document = scraper::Html::parse_document(&body);
        let selector = scraper::Selector::parse(".content img").unwrap();

        let image_element = document.select(&selector).next();
        if let Some(element) = image_element {
            let image_url = element.value().attr("src").unwrap_or("");
            Ok(image_url.to_string())
        } else {
            Ok("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ".to_string())
        }
    } else {
        Ok(format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {}", response.status()))
    }
}